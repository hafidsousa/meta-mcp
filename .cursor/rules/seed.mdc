---
description: 
globs: 
alwaysApply: false
---
# Facebook Marketing MCP Server - Project Intelligence

## Architecture Patterns

### MCP Server Structure
The project follows a modular architecture with clearly separated concerns:
- Core MCP server handling communication with Cursor IDE
- Operation handlers for specific Facebook Marketing API operations
- Configuration management for credentials and environment
- Response formatters for standardized API responses

### Code Organization
- `/src`: Source code directory
  - `/operations`: Domain-specific operation modules
    - `/campaign.ts`: Campaign-specific operations
    - `/adset.ts`: Ad Set specific operations
    - `/ad.ts`: Ad specific operations
    - `/account.ts`: Account management operations
  - `/utils`: Utility functions
    - `/api.ts`: API request utilities and error handling
  - `/config.ts`: Configuration management, environment loading, and logging utilities
  - `/tools`: MCP tool schema definitions organized by entity type
    - `/index.ts`: Tool exports and getAllTools function
    - `/campaign.ts`: Campaign tool definitions
    - `/adset.ts`: Ad set tool definitions
    - `/ad.ts`: Ad tool definitions
    - `/account.ts`: Account tool definitions
  - `/handlers.ts`: MCP request handlers implementation
  - `/types.ts`: TypeScript type definitions
  - `/client.ts`: Main client facade
  - `/server.ts`: Slim main file for server setup and initialization

### Design Patterns
- **Facade Pattern**: Client class provides a simplified interface to subsystems
- **Module Pattern**: Related functionality grouped in specific modules
- **Command Pattern**: For handling different advertising operations
- **Factory Pattern**: For creating API client instances

## Implementation Guidelines

### Module Organization
- Each module should be under 300 lines for maintainability
- Consistent parameter ordering (baseUrl, adAccountId, accessToken, config)
- Centralized error handling in API utilities module
- Domain-specific operations in their own modules
- Client class should use facade pattern to delegate to operation modules

### TypeScript Usage
- Use strict typing for all functions and interfaces
- Define clear interfaces for API requests and responses
- Document all public functions and interfaces
- Use enums for static options like campaign objectives
- Leverage generics for reusable components

### Error Handling
- Use structured error responses
- Centralize error handling in utils/api.ts
- Categorize errors (API, validation, server)
- Provide detailed error messages
- Implement graceful fallbacks
- Log errors with appropriate severity

### Testing Strategy
- Unit tests for individual modules
- Integration tests for module boundaries
- Mock tests for Facebook API
- End-to-end tests for MCP commands
- Performance tests for critical paths

## Best Practices

### Facebook Marketing API
- Respect API rate limits
- Handle authentication errors gracefully
- Validate input before API calls
- Implement retry logic for transient errors
- Cache responses when appropriate

### Code Maintainability
- Follow module size constraint of 300 lines maximum
- Use consistent naming conventions across modules
- Maintain clear separation of concerns
- Implement proper documentation for all modules
- Use facade pattern for simplifying client API

### MCP Commands
- Validate command parameters
- Provide clear response structures
- Handle timeouts appropriately
- Implement progress reporting for long operations
- Support cancellation for long-running processes

### Security Considerations
- Store credentials in environment variables
- Sanitize error messages
- Validate all user inputs
- Implement appropriate access controls
- Ensure secure credential transmission

## Work Patterns

### Development Workflow
- Implement core functionality first
- Add comprehensive testing
- Document all components
- Review code for security and performance
- Create usage examples

### Documentation Focus
- Clear API documentation
- Comprehensive usage examples
- Detailed configuration guide
- Architecture and module organization
- Troubleshooting information
- Security best practices 